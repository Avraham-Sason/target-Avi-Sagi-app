{
  "version": 3,
  "sources": ["../../src/jewishDate.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Shmulik Kravitz.\n *\n * This source code is licensed under the MIT license.\n * See the LICENSE file in the root directory for more information.\n *\n */\n\nimport {\n  BasicJewishDate,\n  JewishDate,\n  BasicJewishDateHebrew,\n  JewishMonth,\n  JewishMonthType,\n} from \"./interfaces\";\nimport {\n  gregorianToJd,\n  hebrewToJd,\n  jdToGregorian,\n  jdToHebrew,\n} from \"./utils/dateUtils\";\nimport { toLength } from \"./utils/numberUtils\";\n\n/**\n * Checks if the given year is a leap year according to the Jewish calendar.\n * @param {number} year - The year to check.\n * @returns {boolean} True if the given year is a leap year according to the Jewish calendar, false otherwise.\n */\nexport const isLeapYear = (year: number): boolean => {\n  const yearIndex = year % 19;\n  return (\n    yearIndex === 0 ||\n    yearIndex === 3 ||\n    yearIndex === 6 ||\n    yearIndex === 8 ||\n    yearIndex === 11 ||\n    yearIndex === 14 ||\n    yearIndex === 17\n  );\n};\n\n/**\n * Returns the index of the given Jewish month in the Jewish calendar.\n * @param {JewishMonthType} jewishMonth - The Jewish month to get the index for.\n * @returns {number} The index of the given Jewish month in the Jewish calendar.\n */\nexport const getIndexByJewishMonth = (jewishMonth: JewishMonthType): number => {\n  const jewishMonthsNamesDic = {\n    [JewishMonth.None]: 0,\n\n    [JewishMonth.Tishri]: 7,\n    [JewishMonth.Cheshvan]: 8,\n    [JewishMonth.Kislev]: 9,\n    [JewishMonth.Tevet]: 10,\n    [JewishMonth.Shevat]: 11,\n    [JewishMonth.Adar]: 12,\n    [JewishMonth.AdarI]: 12,\n    [JewishMonth.AdarII]: 13,\n    [JewishMonth.Nisan]: 1,\n    [JewishMonth.Iyyar]: 2,\n    [JewishMonth.Sivan]: 3,\n    [JewishMonth.Tammuz]: 4,\n    [JewishMonth.Av]: 5,\n    [JewishMonth.Elul]: 6,\n  };\n  return jewishMonthsNamesDic[jewishMonth] || 0;\n};\n\n/**\n *  Returns the Jewish month corresponding to the given index in the Jewish calendar of the given year.\n * @param {number} index - The index of the Jewish month to get (1-based).\n * @param {number} jewishYear - The year to get the Jewish month in.\n * @returns {JewishMonthType} The Jewish month corresponding to the given index in the Jewish calendar of the given year.\n */\nexport const getJewishMonthByIndex = (\n  index: number,\n  jewishYear: number,\n): JewishMonthType => {\n  const jewishMonths: JewishMonthType[] = [\n    JewishMonth.None,\n    JewishMonth.Nisan,\n    JewishMonth.Iyyar,\n    JewishMonth.Sivan,\n    JewishMonth.Tammuz,\n    JewishMonth.Av,\n    JewishMonth.Elul,\n    JewishMonth.Tishri,\n    JewishMonth.Cheshvan,\n    JewishMonth.Kislev,\n    JewishMonth.Tevet,\n    JewishMonth.Shevat,\n    JewishMonth.Adar,\n    JewishMonth.AdarII,\n  ];\n\n  const month = jewishMonths[index] || JewishMonth.None;\n  if (month === JewishMonth.Adar && isLeapYear(jewishYear)) {\n    return JewishMonth.AdarI;\n  }\n  return month;\n};\n\n/**\n *  Returns an array of the Jewish month names in the correct order for the given year.\n *  @param {number} year - The Jewish year to get the months for.\n *  @returns {string[]} An array of the Jewish month names in the correct order for the given year.\n *  */\nexport const getJewishMonthsInOrder = (year: number): string[] => {\n  const jewishMonthsInOrder: JewishMonthType[] = [\n    JewishMonth.None,\n    JewishMonth.Tishri,\n    JewishMonth.Cheshvan,\n    JewishMonth.Kislev,\n    JewishMonth.Tevet,\n    JewishMonth.Shevat,\n    JewishMonth.AdarI,\n    JewishMonth.AdarII,\n    JewishMonth.Nisan,\n    JewishMonth.Iyyar,\n    JewishMonth.Sivan,\n    JewishMonth.Tammuz,\n    JewishMonth.Av,\n    JewishMonth.Elul,\n  ];\n  if (isLeapYear(year)) {\n    return jewishMonthsInOrder;\n  } else {\n    return jewishMonthsInOrder\n      .filter((month) => month !== \"AdarII\")\n      .map((month) => {\n        if (month === \"AdarI\") {\n          return \"Adar\";\n        } else {\n          return month;\n        }\n      });\n  }\n};\n\n/**\n * Returns a string representation of the given Jewish date in the format '\u05DB\"\u05D0 \u05E0\u05D9\u05E1\u05DF \u05EA\u05E9\u05E4\"\u05D2'.\n * @param {JewishDate} jewishDate - The Jewish date to format.\n * @returns {string} A string representation of the given Jewish date in the format '\u05DB\"\u05D0 \u05E0\u05D9\u05E1\u05DF \u05EA\u05E9\u05E4\"\u05D2'.\n */\nexport const formatJewishDate = (jewishDate: JewishDate): string => {\n  return `${jewishDate.day} ${jewishDate.monthName} ${jewishDate.year}`;\n};\n\n/**\n * Converts the given Gregorian date to a Jewish date.\n * @param {Date} date - The Gregorian date to convert.\n * @returns {JewishDate} The Jewish date corresponding to the given Gregorian date.\n */\nexport const toJewishDate = (date: Date): JewishDate => {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  //   console.log({ year, month, day });\n  const jd2 = gregorianToJd(year, month, day);\n\n  const jewishDateArr = jdToHebrew(jd2);\n  // console.log(jewishDateArr);\n\n  const jewishYear = jewishDateArr[0];\n  const jewishMonthName = getJewishMonthByIndex(jewishDateArr[1], jewishYear);\n  // console.log({ jewishMonthName });\n  const jewishMonth = getJewishMonthsInOrder(jewishYear).findIndex(\n    (i) => i === jewishMonthName,\n  );\n  const JewishDate: JewishDate = {\n    year: jewishYear,\n    monthName: jewishMonthName,\n    month: jewishMonth,\n    day: jewishDateArr[2],\n  };\n  return JewishDate;\n};\n\n/**\n * Converts the given Jewish date to a Gregorian date.\n * @param {BasicJewishDate} jewishDate - The Jewish date to convert.\n * @returns {Date} The Gregorian date corresponding to the given Jewish date.\n * */\nexport const toGregorianDate = (jewishDate: BasicJewishDate): Date => {\n  const jewishMonth = getIndexByJewishMonth(jewishDate.monthName);\n  // console.log({ jewishMonth });\n  const jd = hebrewToJd(jewishDate.year, jewishMonth, jewishDate.day);\n  // console.log(jd);\n\n  const gregDateArr = jdToGregorian(jd);\n  // console.log(gregDateArr);\n  const dateStr = `${toLength(gregDateArr[0], 4)}-${toLength(\n    gregDateArr[1],\n    2,\n  )}-${toLength(gregDateArr[2], 2)}`;\n  // console.log(dateStr);\n\n  const date = new Date(dateStr);\n  if (date.getHours() > 0) {\n    // fix issue in chrome that we chan't set hours in Date Constructor for year 0000\n    date.setHours(0, 0, 0, 0);\n  }\n  return date;\n};\n"],
  "mappings": "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",
  "names": ["JewishMonth", "gregorianToJd", "hebrewToJd", "jdToGregorian", "jdToHebrew", "toLength", "isLeapYear", "year", "yearIndex", "getIndexByJewishMonth", "jewishMonth", "getJewishMonthByIndex", "index", "jewishYear", "month", "getJewishMonthsInOrder", "jewishMonthsInOrder", "formatJewishDate", "jewishDate", "toJewishDate", "date", "day", "jd2", "jewishDateArr", "jewishMonthName", "i", "toGregorianDate", "jd", "gregDateArr", "dateStr"]
}
